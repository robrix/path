module Base.Function

id : { a : Type } -> a -> a;
id = \ {_} a . a;

const : { a : Type } -> { b : Type } -> a -> b -> a;
const = \ {_} {_} a _ . a;

flip : { a : Type } -> { b : Type } -> { c : Type } -> (a -> b -> c) -> (b -> a -> c);
flip = \ {_} {_} {_} f b a . f a b;

fix :  { a : Type }
    -> { b : Type }
    -> ((a -> b) -> a -> b)
    -> (a -> b);
fix = \ {a} {b} f . f (fix {a} {b} f);

compose :  { a : Type }
        -> { b : Type }
        -> { c : Type }
        -> (b -> c)
        -> (a -> b)
        -> (a -> c);
compose = \ {_} {_} {_} f g x . f (g x);
