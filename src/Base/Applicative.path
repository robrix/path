module Base.Applicative

import Base.Function
import Base.Functor
import Base.Pointed

Apply : (f : Type -> Type) -> Functor f -> Type
Apply = \ f _ . { a : Type } -> { b : Type } -> { c : Type } -> (a -> b -> c) -> f a -> f b -> f c

(_ <*> _) :  { f : Type -> Type }
          -> (functor : Functor f)
          -> Apply f functor
          -> { a : Type }
          -> { b : Type }
          -> f (a -> b) -> f a -> f b
(_ <*> _) = \ _ liftA2 . liftA2 id

(_ *> _) :  { f : Type -> Type }
         -> (functor : Functor f)
         -> Apply f functor
         -> { a : Type }
         -> { b : Type }
         -> f a -> f b -> f b
(_ *> _) = \ _ liftA2 . liftA2 (const id)

(_ <* _) :  { f : Type -> Type }
         -> (functor : Functor f)
         -> Apply f functor
         -> { a : Type }
         -> { b : Type }
         -> f a -> f b -> f a
(_ <* _) = \ _ liftA2 . liftA2 const

Applicative :  (f : Type -> Type)
            -> (functor : Functor f)
            -> Pointed f
            -> Apply f functor
            -> Type
Applicative = \ f functor pointed apply
              .  { c : Type }
              -> (Pointed f -> Apply f functor -> c)
              -> c
