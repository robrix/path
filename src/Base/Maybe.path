module Base.Maybe

import Base.Bool
import Base.Function
import Base.Functor

Maybe : Type -> Type
Maybe = \ a . âˆ€ b : Type . b -> (a -> b) -> b

just : a -> Maybe a
just = \ a _ _ just . just a

nothing : Maybe a
nothing = \ _ nothing _ . nothing

isJust : Maybe a -> Bool
isJust = \ m . m Bool false (\ _ . true)

map : Functor Maybe
map = \ _ b f m . m (Maybe b) nothing (\ a . just (f a))
