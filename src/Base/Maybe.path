module Base.Maybe

import Base.Bool;
import Base.Function;

Maybe : Type -> Type;
Maybe = \ a . { b : Type } -> b -> (a -> b) -> b;

just : { a : Type } -> a -> Maybe a;
just = \ {_} a {_} _ just . just a;

nothing : { a : Type } -> Maybe a;
nothing = \ {_} {_} nothing _ . nothing;

isJust : { a : Type } -> Maybe a -> Bool;
isJust = \ {_} m . m {Bool} false (\ _ . true);

map :  { a : Type }
    -> { b : Type }
    -> (a -> b)
    -> (Maybe a -> Maybe b);
map = \ {_} {b} f m . m {Maybe b} (nothing {b}) (\ a . just {b} (f a));
