module Base.Nat

import Base.Fix

NatF : Type -> Type
NatF = \ a . { b : Type } -> b -> (a -> b) -> b

sf : a -> NatF a
sf = \ a _ s . s a

zf : NatF a
zf = \ z _ . z


Nat : Type
Nat = Fix NatF

s : Nat -> Nat
s = \ n . in NatF (sf n)

z : Nat
z = in NatF zf


iter : âˆ€ a : Type . a -> (a -> a) -> Nat -> a
iter = \ a z s n . n a (\ _ k f . f a z (\ m . s (k m)))


(_ + _) : Nat -> Nat -> Nat
(_ + _) = \ m . iter Nat m s

(_ * _) : Nat -> Nat -> Nat
(_ * _) = \ m . iter Nat z ((_ + _) m)
