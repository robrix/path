module Base.Nat

import Base.Fix;

NatF : Type -> Type;
NatF = \ a . { b : Type } -> b -> (a -> b) -> b;

zf : { a : Type } -> NatF a;
zf = \ {_} {_} z _ . z;

sf : { a : Type } -> a -> NatF a;
sf = \ {_} a {_} _ s . s a;


Nat : Type;
Nat = Fix NatF;

z : Nat;
z = in {NatF} (zf {Nat});

s : Nat -> Nat;
s = \ n . in {NatF} (sf {Nat} n);


iter : { a : Type } -> a -> (a -> a) -> Nat -> a;
iter = \ {a} z s n . n {a} (\ k f . f z (\ m . s (k m)));


(_ + _) : Nat -> Nat -> Nat;
(_ + _) = \ m . iter {Nat} m s;

(_ * _) : Nat -> Nat -> Nat;
(_ * _) = \ m . iter {Nat} z ((_ + _) m);
