module Base.Nat

import Base.Fix

NatF : Type -> Type
NatF = \ a . { b : Type } -> b -> (a -> b) -> b

sf : a -> NatF a
sf = \ a _ s . s a

zf : NatF a
zf = \ z _ . z


Nat : Type
Nat = Fix NatF

s : Nat -> Nat
s = \ n . in (sf n)

z : Nat
z = in zf


iter : { a : Type } -> a -> (a -> a) -> Nat -> a
iter = \ z s n . n (\ k f . f z (\ m . s (k m)))


(_ + _) : Nat -> Nat -> Nat
(_ + _) = \ m . iter m s

(_ * _) : Nat -> Nat -> Nat
(_ * _) = \ m . iter z ((_ + _) m)
