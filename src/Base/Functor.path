module Base.Functor

import Base.Function
import Base.Unit

Functor : (f : Type -> Type) -> Type
Functor =  \ f
        .  { a : Type }
        -> { b : Type }
        -> (  a ->   b)
        -> (f a -> f b)

void : { f : Type -> Type } -> Functor f -> { a : Type } -> f a -> f Unit
void = \ map . map (const unit)

(_ <$ _) : { f : Type -> Type } -> Functor f -> { a : Type } -> { b : Type } -> a -> f b -> f a
(_ <$ _) = \ map a . map (const a)
