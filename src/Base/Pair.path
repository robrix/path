module Base.Pair

Pair : Type -> Type -> Type
Pair = \ l r . { a : Type } -> (l -> r -> a) -> a

pair : l -> r -> Pair l r
pair = \ l r f . f l r

fst : Pair l r -> l
fst = \ p . p (\ fst _ . fst)

snd : Pair l r -> r
snd = \ p . p (\ _ snd . snd)


map :  (r -> r')
    -> (Pair l r -> Pair l r')
map = \ f e . e (\ l' r . pair l' (f r))

bimap :  (     l   ->      l')
      -> (       r ->         r')
      -> (Pair l r -> Pair l' r')
bimap = \ f g e . e (\ l r . pair (f l) (g r))
