module Base.List

import Base.Fix

ListF : Type -> Type -> Type
ListF = \ a b . { c : Type } -> c -> (a -> b -> c) -> c

nilf : ListF a b
nilf = \ nil _ . nil

consf : a -> b -> ListF a b
consf = \ a b _ cons . cons a b


List : Type -> Type
List = \ a . Fix (ListF a)

nil : List a
nil = in nilf

cons : a -> List a -> List a
cons = \ h t . in (consf h t)


append : List a -> List a -> List a
append = \ xs ys . xs (\ k f . f ys (\ x xs . cons x (k xs)))


map :  (a -> b)
    -> (List a -> List b)
map = \ f l . l (\ k g . g nil (\ a as . cons (f a) (k as)))
