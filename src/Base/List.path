module Base.List

import Base.Fix
import Base.Functor

ListF : Type -> Type -> Type
ListF = \ a b . { c : Type } -> c -> (a -> b -> c) -> c

nilf : ListF a b
nilf = \ nil _ . nil

consf : a -> b -> ListF a b
consf = \ a b _ cons . cons a b


List : Type -> Type
List = \ a . Fix (ListF a)

nil : { a : Type } -> List a
nil = in nilf

cons : { a : Type } -> a -> List a -> List a
cons = \ h t . in (consf h t)


append : { a : Type } -> List a -> List a -> List a
append = \ xs ys . xs (\ _ k f . f ys (\ x xs . cons x (k xs)))


map : Functor List
map = \ _ b f l . l (List b) (\ _ k g . g (List b) (nil b) (\ a as . cons b (f a) (k as)))
