module Base.List

import Base.Fix
import Base.Functor

ListF : Type -> Type -> Type
ListF = \ a b . âˆ€ c : Type . c -> (a -> b -> c) -> c

nilf : ListF a b
nilf = \ _ _ _ nil _ . nil

consf : a -> b -> ListF a b
consf = \ _ _ a b _ _ cons . cons a b


List : Type -> Type
List = \ a . Fix (ListF a)

nil : List a
nil = \ a . in (ListF a) (nilf a (List a))

cons : a -> List a -> List a
cons = \ a h t . in (ListF a) (consf a (List a) h t)


append : List a -> List a -> List a
append = \ a xs ys . xs (List a) (\ _ k f . f (List a) ys (\ x xs . cons a x (k xs)))


map : Functor List
map = \ _ b f l . l (List b) (\ _ k g . g (List b) (nil b) (\ a as . cons b (f a) (k as)))
